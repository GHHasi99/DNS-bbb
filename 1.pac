 from rich.live import Live from rich.panel import Panel from rich.layout import Layout from rich.table import Table from rich.text import Text from rich.console import Console from scapy.all import sr1, IP, ICMP import numpy as np from collections import deque, Counter import argparse, math, time, sys, threading class NexusPacketAnalyzer: def __init__(self): self.packet_arrival_times = deque(maxlen=100) self.kalman_state = np.array([0.0]) self.kalman_covariance = np.array([1.0]) self.process_variance = 1e-4 self.measurement_variance = 0.1**2 self.latest_data = {} def _apply_kalman_filter(self, measurement): predicted_state = self.kalman_state predicted_covariance = self.kalman_covariance + self.process_variance kalman_gain = predicted_covariance / (predicted_covariance + self.measurement_variance) self.kalman_state = predicted_state + kalman_gain * (measurement - predicted_state) self.kalman_covariance = (1 - kalman_gain) * predicted_covariance return self.kalman_state[0], abs(measurement - predicted_state[0]) def process_packet(self, packet): ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà IP ‡πÉ‡∏ô‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡πá‡∏ï‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ö‡∏ï‡πå (packet[IP].payload): ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ payload = ‡πÑ‡∏ö‡∏ï‡πå (packet[IP].payload) ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì = np.frombuffer(payload, dtype=np.uint8) N = len(signal) ‡∏ñ‡πâ‡∏≤ N == 0: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ psd = np.abs(np.fft.fft(signal))**2 / N power_signal = np.max(psd) ‡∏ñ‡πâ‡∏≤ psd.size > 0 ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô 0 power_noise = np.sum(psd) - power_signal snr = 10 * math.log10(power_signal / (power_noise ‡∏ñ‡πâ‡∏≤ power_noise > 0 ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô 1e-9)) byte_counts = Counter(payload) ‡πÄ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏õ‡∏µ = -sum((c / N) * math.log2(c / N) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö c ‡πÉ‡∏ô byte_counts.values()) self.packet_arrival_times.append(packet.time) ‡∏à‡∏¥‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå = np.std(np.diff(list(self.packet_arrival_times))) * 1000 if len(self.packet_arrival_times) > 1 else 0 filtered_snr, prediction_error = self._apply_kalman_filter(snr) self.latest_data = { 'src': packet[IP].src, 'dst': packet[IP].dst, 'snr': snr, 'jitter': jitter, 'entropy': entropy, 'filtered_snr': filtered_snr, 'prediction_error': prediction_error, } class NexusRouteOptimizer: def __init__(self): self.targets = { "‡∏Ñ‡∏•‡∏≤‡∏ß‡∏î‡πå‡πÅ‡∏ü‡∏•‡∏£‡πå DNS": "1.1.1.1", "‡∏Å‡∏π‡πÄ‡∏Å‡∏¥‡∏• DNS": "8.8.8.8", "‡∏Ñ‡∏ß‡∏≠‡∏î 9 DNS": "9.9.9.9", "‡πÇ‡∏≠‡πÄ‡∏û‡πà‡∏ô‡∏î‡∏µ‡πÄ‡∏≠‡πá‡∏ô‡πÄ‡∏≠‡∏™": "208.67.222.222", } self.results = {name: {'latency': -1, 'ewma': -1} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô self‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢} self.best_route = ("N/A", float('inf')) self.alpha = 0.2 self.is_running = True self.lock = threading.Lock() def _ping(self, target_ip): ‡∏•‡∏≠‡∏á: packet = IP(dst=target_ip)/ICMP() ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö = sr1(packet, timeout=1, verbose=0) ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ‡∏Å‡∏•‡∏±‡∏ö (reply.time - packet.sent_time) * 1000 ‡∏Å‡∏•‡∏±‡∏ö -1 ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô ‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô: ‡∏Å‡∏•‡∏±‡∏ö -1 def _update_ewma(self, name, new_latency): ‡∏î‡πâ‡∏ß‡∏¢ self.lock: current_ewma = self.results[name]['ewma'] ‡∏ñ‡πâ‡∏≤ current_ewma == -1 ‡∏´‡∏£‡∏∑‡∏≠ new_latency == -1: ‡∏Å‡∏•‡∏±‡∏ö new_latency ‡∏Å‡∏•‡∏±‡∏ö self.alpha * new_latency + (1 - self.alpha) * current_ewma def optimize(self): ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà self.is_running: temp_best_latency = float('inf') temp_best_name = "N/A" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠, ip ‡πÉ‡∏ô self.targets.items(): latency = self._ping(ip) ewma_latency = self._update_ewma(name, latency) ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà self.lock: self.results[name]['latency'] = latency self.results[name]['ewma'] = ewma_latency ‡∏ñ‡πâ‡∏≤ ewma_latency ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö -1 ‡πÅ‡∏•‡∏∞ ewma_latency < temp_best_latency: temp_best_latency = ewma_latency temp_best_name = ‡∏ä‡∏∑‡πà‡∏≠ ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà self.lock: self.best_route = (temp_best_name, temp_best_latency) time.sleep(10) def start(self): thread = threading.Thread(target=self.optimize, daemon=True) thread.start() class NexusTerminalDashboard: def __init__(self, analyzer, optimizer): self.analyzer = analyzer self.optimizer = optimizer self.console = Console() def _create_layout(self) -> Layout: layout = Layout(name="root") layout.split( Layout(name="header", size=7), Layout(ratio=1, name="main"), Layout(size=3, name="footer"), ) layout["main"].split_row(Layout(name="left", ratio=1), Layout(name="right", ratio=2)) layout["left"].split(Layout(name="top_left"), Layout(name="bottom_left")) layout["right"].split(Layout(name="top_right"), Layout(name="bottom_right")) return layout def _get_route_optimizer_panel(self) -> Panel: table = Table(title="[bold]‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (EWMA)[/bold]", border_style="green") table.add_column(" ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", style="cyan", no_wrap=True) table.add_column(" ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á (ms)", style="magenta", justify="right") with self.optimizer.lock: results = self.optimizer.results best_name, best_latency = self.optimizer.best_route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô results.items(): ewma = data['ewma'] display_latency = f"{ewma:.2f}" if ewma != -1 else "[dim]‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...[/dim]" if name == best_name: table.add_row(f"‚ú® {name}", f"[bold green]{display_latency}[/bold green]") else: table.add_row(name, display_latency) return Panel(table, title="[bold green]üõ∞Ô∏è‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥[/bold green]", border_style="green") def _update_dashboard(self,layout, data):layout["header"].update(Panel(Text(""" ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ïö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏™‡∏µ ‚ïö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏™‡∏µ - ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•... | ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà... [bold Magenta]{['|','/','-','\\'][int(time.time()*10)%4]}[/bold Magenta]", justify="center")) quality_table = Table.grid(padding=(0, 1), expand=True) quality_table.add_column("‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏∑‡∏ô", style="bold yellow"); quality_table.add_column("‡∏Ñ‡πà‡∏≤", justify="right") snr_style = "green" ‡∏ñ‡πâ‡∏≤ data.get('snr', 0) > 20 ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô "yellow" ‡∏ñ‡πâ‡∏≤ data.get('snr', 0) > 10 ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô "red" jitter_style = "green" ‡∏ñ‡πâ‡∏≤ data.get('jitter', 0) < 5 ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô "yellow" ‡∏ñ‡πâ‡∏≤ data.get('jitter', 0) < 20 ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô "red" quality_table.add_row("üì° SNR", f"[{snr_style}]{data.get('snr', 0):.2f} dB[/{snr_style}]") quality_table.add_row("‚è±Ô∏è Jitter", f"[{jitter_style}]{data.get('jitter', 0):.2f} ms[/{jitter_style}]") layout["top_right"].update(Panel(quality_table, title="[bold yellow]üìä ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì[/bold yellow]", border_style="yellow")) analysis_table = Table.grid(padding=(0, 1), expand=True) analysis_table.add_column(" ‡πÇ‡∏ó‡∏£", style="bold cyan"); analysis_table.add_column("‡∏Ñ‡πà‡∏≤", justify="right") entropy_style = "red" if data.get('entropy', 0) > 7.5 else "yellow" if data.get('entropy', 0) > 6 else "green" error_style = "red" if data.get('prediction_error', 0) > 50 else "yellow" if data.get('prediction_error',0) > 20 else "green" analysis_table.add_row("üîë ‡πÄ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏õ‡∏µ", f"[{entropy_style}]{data.get('entropy', 0):.2f}[/{entropy_style}]") analysis_table.add_row("üîÆ SNR ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß", f"[white]{data.get('filtered_snr', 0):.2f} dB[/white]") analysis_table.add_row("‚ùó ‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", f"[{error_style}]{data.get('prediction_error', 0):.2f}[/{error_style}]") ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö["bottom_right"].update(Panel(analysis_table, title="[bold cyan]üß† ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏ä‡∏¥‡∏á[/bold cyan]", border_style="cyan")) layout["top_left"].update(Panel(Text("... ‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ô‡∏µ‡πâ ...", style="dim"), title="[bold red]üì°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà[/bold red]", border_style="red"))layout["bottom_left"].update(self._get_route_optimizer_panel()) def run(self, interface):layout = self._create_layout() with Live(layout, screen=True, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á_stderr=False, Vertical_overflow="crop") as live: def callback(packet): self.analyzer.process_packet(packet) self._update_dashboard(layout, self.analyzer.latest_data) try: self.optimizer.start() live.console.print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ö‡∏ô‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢ [bold Magenta]{interface}[/bold Magenta]...") ‡∏î‡∏°‡∏Å‡∏•‡∏¥‡πà‡∏ô (iface=‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã, prn=‡πÇ‡∏ó‡∏£‡∏Å‡∏•‡∏±‡∏ö, ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤=0) ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô e: live.console.print(f"[bold red][‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ]: {e}[/bold red]") ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: self.optimizer.is_running = False if __name__ == "__main__": parser = argparse.ArgumentParser(description="‡πÄ‡∏ô‡πá‡∏Å‡∏ã‡∏±‡∏™ ‡∏ß‡∏≤‡∏•‡∏¥‡πÄ‡∏î‡πÄ‡∏ï‡∏≠‡∏£‡πå v7.0 - ‡∏£‡∏∏‡πà‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û") parser.add_argument("-i", "--interface", required=True, help=" ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") args = parser.parse_args() analyzer_model = NexusPacketAnalyzer() Optimizer_module = NexusRouteOptimizer() Dashboard_view = NexusTerminalDashboard(analyzer_model, Optimizer_module) Dashboard_view.run(interface=args.interface) ```title="[bold red]üì° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß[/bold red]", border_style="red")) ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö["bottom_left"].update(self._get_route_optimizer_panel()) def run(self, interface):layout = self._create_layout() with Live(layout, screen=True, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á_stderr=False, Vertical_overflow="crop") ‡πÄ‡∏õ‡πá‡∏ô live: def callback(packet): self.analyzer.process_packet(packet) self._update_dashboard(layout, self.analyzer.latest_data) try: self.optimizer.start() live.console.print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ö‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå [bold Magenta]{interface}[/bold Magenta]...") sniff(iface=interface, prn=callback, store=0) ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Exception as e: live.console.print(f"[bold red][‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏£‡∏¥‡∏á‡πÜ]: {e}[/bold red]") ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: self.optimizer.is_running = False if __name__ == "__main__": parser = argparse.ArgumentParser(description="‡πÄ‡∏ô‡πá‡∏Å‡∏ã‡∏±‡∏™ ‡∏ß‡∏≤‡∏•‡∏¥‡πÄ‡∏î‡πÄ‡∏ï‡∏≠‡∏£‡πå v7.0 - ‡∏£‡∏∏‡πà‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á") parser.add_argument("-i", "--interface", required=True, help=" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") args = parser.parse_args() analyzer_model = NexusPacketAnalyzer() Optimizer_module = NexusRouteOptimizer() Dashboard_view = NexusTerminalDashboard(analyzer_model, Optimizer_module) Dashboard_view.run(‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã=args.interface) ```title="[bold red]üì° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß[/bold red]", border_style="red")) ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö["bottom_left"].update(self._get_route_optimizer_panel()) def run(self, interface):layout = self._create_layout() with Live(layout, screen=True, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á_stderr=False, Vertical_overflow="crop") ‡πÄ‡∏õ‡πá‡∏ô live: def callback(packet): self.analyzer.process_packet(packet) self._update_dashboard(layout, self.analyzer.latest_data) try: self.optimizer.start() live.console.print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ö‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‡πÅ‡∏ß‡∏£‡πå [bold Magenta]{interface}[/bold Magenta]...") sniff(iface=interface, prn=callback, store=0) ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Exception as e: live.console.print(f"[bold red][‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏£‡∏¥‡∏á‡πÜ]: {e}[/bold red]") ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: self.optimizer.is_running = False if __name__ == "__main__": parser = argparse.ArgumentParser(description="‡πÄ‡∏ô‡πá‡∏Å‡∏ã‡∏±‡∏™ ‡∏ß‡∏≤‡∏•‡∏¥‡πÄ‡∏î‡πÄ‡∏ï‡∏≠‡∏£‡πå v7.0 - ‡∏£‡∏∏‡πà‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á") parser.add_argument("-i", "--interface", required=True, help=" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") args = parser.parse_args() analyzer_model = NexusPacketAnalyzer() Optimizer_module = NexusRouteOptimizer() Dashboard_view = NexusTerminalDashboard(analyzer_model, Optimizer_module) Dashboard_view.run(‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã=args.interface)
